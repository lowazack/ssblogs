/**
 * Display.
 *
 * The classes are named using the format:
 * .{property}-{value}
 * .{property}-{breakpoint}-{value}
 *
 * Examples:
 * .p-r        # position: relative
 * .p-a-md    # position: absolute;    # Medium up.
 * .p-st-mdo    # position: sticky;          # Medium only.
 *
 * Important has been declared for each statement. This is to override any other
 * selectors that may be making use of the same property. This is a utility
 * class. If you don't want this overriding, remove the class from your HTML
 * element.
 *
 * Variables that can be overridden:
 *  - $display--breakpoints   # Breakpoints catered for.
 */

// CSS properties.
$display--properties: (
    'p':  'position',
);

// CSS values - this is not an exhaustive list. Feel free to add.
$display--values: (
    'r':  'relative',
    'f':  'fixed',
    's': 'static',
    'a': 'absolute',
    'i': 'inherit',
    'u':  'unset',
    'in':  'initial',
    'st': 'sticky',
);

// The breakpoints.
$display--breakpoints: (
 'sm':   'small-up',
 'md':   'medium-up',
 'lg':   'large-up',
 'smo':  'small-only',
 'mdo':  'medium-only',
) !default;


/**
 * Loop css properties (display).
 */
@each $property-key, $property-value in $display--properties {

  /**
   * Loop values (flex, inline-flex, block...).
   * Outside of breakpoint.
   */
  @each $display-key, $display-value in $display--values {
    // Cater for all values here - .{property}-{value}.
    .#{$property-key}-#{$display-key} {
      #{$property-value}: #{$display-value} !important;
    }
  }

  /**
   * Loop breakpoints (small, medium, large...).
   */
  @each $breakpoint-key, $breakpoint-value in $display--breakpoints {

    // Cater for breakpoints here - .{property}-{breakpoint}-{value}.
    @include breakpoint($breakpoint-value){

      /**
       * Loop values (flex, inline-flex, block...).
       */
      @each $display-key, $display-value in $display--values {
        .#{$property-key}-#{$breakpoint-key}-#{$display-key} {
          #{$property-value}: #{$display-value} !important;
        }
      }
    }
  }
}
